Line([Open('<!--', mode=DjHTML, ignore=True), Text(' Multiline comment ', mode=Comment, ignore=True), Close('-->', mode=DjHTML, ignore=True)], ignore=True)
Line([Open('{#', mode=DjTXT, ignore=True)], ignore=True)
Line([Text('      ,-._|\\', mode=Comment, ignore=True)], level=1, ignore=True)
Line([Text('     /     .\\', mode=Comment, ignore=True)], level=1, ignore=True)
Line([Text('     \\_,--._/', mode=Comment, ignore=True)], level=1, ignore=True)
Line([Close('#}', mode=DjTXT, ignore=True)], ignore=True)
Line([])
Line([])
Line([Open('<!--', mode=DjHTML, ignore=True), Text(' Raw block ', mode=Comment, ignore=True), Close('-->', mode=DjHTML, ignore=True)], ignore=True)
Line([Open('{% raw %}', mode=DjTXT, ignore=True)], ignore=True)
Line([Text('      ,-._|\\', mode=Comment, ignore=True)], level=1, ignore=True)
Line([Text('     /     .\\', mode=Comment, ignore=True)], level=1, ignore=True)
Line([Text('     \\_,--._/', mode=Comment, ignore=True)], level=1, ignore=True)
Line([Close('{% endraw %}', mode=DjTXT, ignore=True)], ignore=True)
Line([])
Line([])
Line([Open('<!--', mode=DjHTML, ignore=True), Text(' Whitespace control ', mode=Comment, ignore=True), Close('-->', mode=DjHTML, ignore=True)], ignore=True)
Line([Text('<', mode=DjHTML), Text('div', mode=InsideHTMLTag, absolute=5), Open('>', mode=DjHTML)])
Line([Text('    ', mode=DjHTML), Open('{%+ if something %}', mode=DjTXT, level=1)], level=1)
Line([Text('        yay', mode=DjHTML)], level=2)
Line([Text('    ', mode=DjHTML), Close('{% endif %}', mode=DjTXT)], level=1)
Line([Close('</div>', mode=DjHTML)])
Line([])
Line([Text('<', mode=DjHTML), Text('div', mode=InsideHTMLTag, absolute=5), Open('>', mode=DjHTML)])
Line([Text('    ', mode=DjHTML), Open('{% if something +%}', mode=DjTXT, level=1)], level=1)
Line([Text('        yay', mode=DjHTML)], level=2)
Line([Text('    ', mode=DjHTML), Close('{% endif %}', mode=DjTXT)], level=1)
Line([Close('</div>', mode=DjHTML)])
Line([])
Line([Open('{% for item in seq -%}', mode=DjTXT)])
Line([Text('    ', mode=DjHTML), Text('{{ item }}', mode=DjHTML)], level=1)
Line([Close('{%- endfor %}', mode=DjTXT)])
Line([])
Line([Open('{%- macro render_currency(currency, amount) -%}', mode=DjTXT)])
Line([Text('    ', mode=DjHTML), Text('{{ amount }}', mode=DjHTML)], level=1)
Line([Close('{%- endmacro -%}', mode=DjTXT)])
Line([])
Line([])
Line([Open('<!--', mode=DjHTML, ignore=True), Text(' Set assignment ', mode=Comment, ignore=True), Close('-->', mode=DjHTML, ignore=True)], ignore=True)
Line([Text('<', mode=DjHTML), Text('div', mode=InsideHTMLTag, absolute=5), Open('>', mode=DjHTML)])
Line([Text('    ', mode=DjHTML), Text('{% set "five" = 5 %}', mode=DjTXT)], level=1)
Line([Text('    Five is ', mode=DjHTML), Text('{{ five }}', mode=DjHTML)], level=1)
Line([Text('    ', mode=DjHTML), Open('{% set blockdata %}', mode=DjTXT, level=1)], level=1)
Line([Text('        Contents', mode=DjHTML)], level=2)
Line([Text('    ', mode=DjHTML), Close('{% endset %}', mode=DjTXT)], level=1)
Line([Text('    Contents of block is block', mode=DjHTML)], level=1)
Line([Close('</div>', mode=DjHTML)])
Line([])
Line([])
Line([Open('<!--', mode=DjHTML, ignore=True), Text(" Don't support multiline if statements (for now) ", mode=Comment, ignore=True), Close('-->', mode=DjHTML, ignore=True)], ignore=True)
Line([Open('{% if ( condition1 and', mode=DjTXT)])
Line([Text('    condition2 )', mode=DjHTML, level=1)], level=1)
Line([Text('%}', mode=DjHTML)])
Line([Text('    text', mode=DjHTML)], level=1)
Line([Close('{% endif %}', mode=DjTXT)])
Line([])